name: Mirror Docker Images to CNB

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Select image to mirror (or leave blank to mirror all)'
        required: false
        type: choice
        options:
          - ""
          - vaultwarden
          - bark-server
          - elasticsearch
          - mysql
          - hyperf
          - clickhouse
          - arcane
      version:
        description: 'Override tag version'
        required: false
        type: string
  push:
    paths:
      - '.github/images.yml'
    branches: [ 'main' ]

jobs:
  mirror:
    name: >-
      Mirror ${{ github.event.inputs.name || 'All Images' }}${{ github.event.inputs.version && format(' (version: {0})', github.event.inputs.version) || '' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Mirror images
        env:
          INPUT_NAME: ${{ github.event.inputs.name }}
          INPUT_VERSION: ${{ github.event.inputs.version }}
        run: |
          # 设置 shell 选项，遇到错误立即退出
          set -e
          
          images=$(yq -o json '.images' ${{ github.workspace }}/.github/images.yml)

          if [ -n "$INPUT_NAME" ]; then
            matrix=$(echo "$images" | jq -c --arg name "$INPUT_NAME" '.[] | select(.name == $name)')
          else
            matrix=$(echo "$images" | jq -c '.[]')
          fi

          if [ -z "$matrix" ]; then
            echo "::error title=No Matching Images::No matching images found for name: $INPUT_NAME"
            exit 1
          fi

          echo "$matrix" | while read -r item; do
            image=$(echo "$item" | jq -r '.image')
            name=$(echo "$item" | jq -r '.name')
            default_tag=$(echo "$item" | jq -r '.tag')
            tag=${INPUT_VERSION:-$default_tag}

            # 根据你的错误日志，目标路径是 docker.cnb.cool/nilpotenter/arcane
            TARGET_IMAGE="docker.cnb.cool/nilpotenter/${name}:${tag}"
            echo "Mirroring $image:$tag to $TARGET_IMAGE"

            # 为 ghcr.io 镜像添加认证
            if [[ "$image" == ghcr.io/* ]]; then
              echo "Source is GitHub Container Registry (ghcr.io). Using GitHub token for authentication."
              docker run --rm \
                ghcr.io/containers/skopeo:latest \
                copy --all \
                --src-creds "x:${{ secrets.GITHUB_TOKEN }}" \
                docker://${image}:${tag} \
                docker://${TARGET_IMAGE} \
                --dest-creds "cnb:${{ secrets.CNB_DOCKER_TOKEN }}"
            else
              # 其他镜像（如 Docker Hub）使用原有逻辑
              echo "Source is a public or Docker Hub registry."
              docker run --rm \
                ghcr.io/containers/skopeo:latest \
                copy --all \
                --src-creds "${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_TOKEN }}" \
                docker://${image}:${tag} \
                docker://${TARGET_IMAGE} \
                --dest-creds "cnb:${{ secrets.CNB_DOCKER_TOKEN }}"
            fi
          
            echo "::notice title=Image Published::https://${TARGET_IMAGE}"
          done
